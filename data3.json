{
  "COURSE CODE": "MCA 101",
  "Arrays, Functions and Strings": "Declaration, manipulation and String – handling",
  "arguments, function – category, function prototypes, parameter passing, recursion, and storage classes": "",
  "Pointers, Structures, Unions, File handling": "",
  "Module": "3",
  "Lecture 1": "Introduction to C",
  "Lecture 2": "Structure  of C, compilation, execution",
  "Lecture 3": "character set, identifiers, keywords",
  "Lecture 4": "constants, variables",
  "Lecture 5": "expression, operators",
  "Lecture 6": "operators continue...",
  "Lecture 7": "loops: do while, while",
  "Lecture 8": "for loop, break, continue statement",
  "Lecture 9": "control Statements",
  "Lecture 10": "nesting of if else..., if else ladder",
  "Lecture 11": "arrays",
  "Lecture 12": "2-diamensional array",
  "Lecture 13": "String library functions",
  "Lecture 14": "functions, categories",
  "Lecture 15": "functions categories cont..",
  "Lecture 16": "Actual arguments and Formal arguments, call by value call by",
  "Lecture 17": "local, global, static variable",
  "Lecture 18": "monolithic vs modular programming, Storage classes",
  "Lecture 19": "storage class cont.., pointer",
  "Lecture 20": "pointer comparison, increment decrement",
  "Lecture 21": "precedence level of pointer, pointer comparison",
  "Lecture 22": "pointer to pointer, pointer to structure",
  "Lecture 23": "pointer initialization, accessing elements",
  "Lecture 24": "size of Structure in, array vs structure, array within structure",
  "Lecture 25": "passing structure to function, Nested Structure",
  "Lecture 26": "Union",
  "Lecture 27": "nesting of unions, dynamic memory allocation",
  "Lecture 28": "dynamic memory allocation conti...",
  "Lecture 29": "dynamic array, file",
  "Lecture 30": "file operation",
  "Lecture 31": "file operation on string",
  "Lecture 32": "",
  "Lecture 33": "",
  "Lecture Note": "31",
  "titles": "The original was still called Programming in C, and the title that covered",
  "Low level language": "",
  "High level language": "",
  "Three types of translator are there": "",
  "Preprocessor  Directive": "",
  "Global Declaration": "",
  "function": "",
  "Syntax": "",
  "Output": "name=sona",
  "Step 1": "The program that is to be compiled is first typed into a file on the",
  "Step 2": "After the source program has been entered into a file, then proceed to have",
  "Step 3": "When all the syntactic and semantic errors have been removed from the",
  "Step 4": "After the program has been translated the next step in the compilation",
  "Step 5": "After the program has been translated into object code, it is ready to be",
  "Step 6": "To subsequently execute the program, the command a.out has the effect",
  "re Note": "3",
  "functions, structures etc. Rules for naming identifiers are": "",
  "basic built-in data types": "int, float, double, char",
  "Enumeration data type": "enum",
  "Derived data type": "pointer, array, structure, union",
  "Void data type": "void",
  "Size qualifier": "short, long",
  "Sign qualifier": "signed, unsigned",
  "bit machine is given below": "",
  "constants can be divided into two major categories": "",
  "Numeric constant": "Numeric constant consists of digits. It required minimum size",
  "whole number which have no decimal point. Types of integer constants are": "",
  "Decimal constant": "0-------9(base 10)",
  "Octal constant": "0-------7(base 8)",
  "Hexa decimal  constant": "0----9, A------F(base 16)",
  "-No commas or blanks are allowed within a real constant. Ex.": "+325.34",
  "lower case alphabets and decimal integers are as": "",
  "Example": "",
  "It can be arithmetic, logical and relational for example": "-",
  "operand and it is represented as (? ,": ").",
  "exp1 ? exp2": "exp3",
  "int s= (a>b) ? a": "b;",
  "printf(“value is": "%d”);",
  "Value is": "10",
  "C has three logical operators": "",
  "?": "conditional  operator          13",
  "Loop": "-it is a block of statement that performs set of instructions. In loops",
  "statement is": "",
  "first time. It means  do while loop  always executes at least once. Notes": "",
  "syntax for writing is": "",
  "example nesting of for loop can be represented as": "",
  "printf  (“ enter a number": "”);",
  "Enter a number": "12",
  "Its syntax is": "",
  "printf (“enter a number": "”);",
  "Syntax is": "-",
  "ADVANTAGES": "array variable can store more than one value at a time where",
  "DECLARATION OF AN ARRAY": "",
  "We can represent individual array as": "",
  "Symbolic constant can also be used to specify the size of the array as": "",
  "INITIALIZATION OF AN ARRAY": "",
  "Total size in byte for 1D array is": "",
  "ACCESSING OF ARRAY ELEMENT": "",
  "printf(“the array elements are": "\\n”);",
  "OUTPUT": "",
  "Example 2": "",
  "For example": "",
  "(note": "-here we will have to copy all the elements of array one by one, using for",
  "for reading value": "-",
  "For displaying value": "-",
  "Initialization of 2-d array": "",
  "2-D array can be initialized in a way similar to that of 1-D array. for example": "-",
  "for example": "-",
  "In array version to calculate legnth": "-",
  "print(”Enter a string": "”);",
  "Enter a string": "C in Depth",
  "return a value": "",
  "printf(“Enter two strings": "”);",
  "printf(“Enter a string": "”);",
  "printf(“First string": "%s\\t second string:%s\\n”,str1,str2);",
  "Enter two strings": "data",
  "First string": "database second string: database",
  "`Now first string is": "database-one",
  "Here in system defined function description": "",
  "Function definition": "-",
  "Function declaration": "-",
  "Function call": "By the programmer",
  "Ex": "-",
  "Notes": "-",
  "Function that have no argument and no return value is written as": "-",
  "printf(“enter  value": "\\n”);",
  "printf(“enter two values": "\\n”);",
  "printf(“after  changing two value of a=%d and b=%d\\n": "”a,b);",
  "Local variable": "-",
  "Global variable": "-",
  "Static variables": "static variables are declared by writing the key word static.",
  "-syntax": "-",
  "are": "",
  "Syntax of declaring storage classes is": "-",
  "There are four types of storage classes and all are keywords": "-",
  "Examples": "-",
  "Compiler assume different storage class based on": "-",
  "1 ) Storage class": "- tells us about storage place(where variable would be stored).",
  "2)  Intial value": "-what would be the initial value of the variable.",
  "3)  Scope of the variable": "-what would be the value of the variable of the program.",
  "4)  Life time": "- It is the time between the creation and distribution of a variable",
  "Its features": "-",
  "Default initial value": "-zero",
  "Scope": "- global",
  "Life time": "-as long as program execution remains it retains.",
  "The features are": "-",
  "Storage": "- memory area",
  "Its feature are": "-",
  "Features are": "-",
  "Note": "-",
  "Arithmetic operation never perform on pointer are": "",
  "Operation performed in pointer are": "-",
  "printf(\"\\nEnter information of students": "\");",
  "printf(\"\\nEnter the roll no": "%d\\n\",s[i].roll);",
  "printf(\"\\nEnter the name": "\");",
  "printf(\"\\nEnter the branch": "\");",
  "printf(\"\\nDisplaying information of students": "\\n\\n\");",
  "printf(\"\\n\\nInformation for roll no%d": "\\n\",i+1);",
  "printf(\"\\nName": "\");",
  "printf(\"\\nBranch": "\");",
  "printf(\"\\nEnter roll": "\");",
  "printf(\"\\nEnter branch": "\");",
  "Syntax of union": "",
  "malloc()": "",
  "which can be type cast such as": "",
  "ways as": "",
  "File": "the file is a permanent storage medium in which we can store the data",
  "opening a file": "",
  "syntax": "",
  "example": "",
  "File-pointer": "The file pointer is a pointer variable which can be store the address",
  "Declaration of a file pointer": "-",
  "printf(“Successful read": "word=%d\\n”,word);",
  "BOOKS": ""
}
